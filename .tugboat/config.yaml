services:
  # What to call the service hosting the site.
  php:
    # Use PHP 8.x with Apache; this syntax pulls in the latest version of PHP 8
    image: tugboatqa/php:8.2-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building
    depends: mysql

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Install opcache and mod-rewrite.
        - docker-php-ext-install opcache
        - a2enmod headers rewrite

        # Link the document root to the expected path. This example links /web
        # to the docroot.
        - ln -snf "${TUGBOAT_ROOT}/web" "${DOCROOT}"

        # Create the Drupal private and public files directories if they aren't
        # already present.
        - mkdir -p "${TUGBOAT_ROOT}/files-private" "${DOCROOT}/sites/default/files"

        # A common practice in many Drupal projects is to store the config and
        # private files outside of the Drupal root. If that's the case for your
        # project, you can either specify the absolute paths to those
        # directories in your settings.local.php, or you can symlink them in
        # here. Here is an example of the latter option:
        - ln -snf "${TUGBOAT_ROOT}/config" "${DOCROOT}/../config"
        - ln -snf "${TUGBOAT_ROOT}/files-private" "${DOCROOT}/../files-private"

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Use the tugboat-specific Drupal settings.
        - cp "${TUGBOAT_ROOT}/.tugboat/settings.local.php" "${DOCROOT}/sites/default/"

        # Install/update packages managed by composer, including drush.
        - composer install --optimize-autoloader

        # Copy Drupal's public files directory from an external server. The
        # public SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use rsync over SSH.
#        - rsync -av --delete user@example.com:/path/to/files/ "${DOCROOT}/sites/default/files/"

        # Alternatively, another common practice is to use the
        # stage_file_proxy Drupal module. This module lets Drupal serve
        # files from another publicly-accessible Drupal site instead of
        # syncing the entire files directory into the Tugboat Preview.
        # This results in smaller previews and reduces the build time.
#        - composer require --dev drupal/stage_file_proxy
#        - vendor/bin/drush pm:enable --yes stage_file_proxy
#        - vendor/bin/drush config:set --yes stage_file_proxy.settings origin "http://www.example.com"

        # Set file permissions such that Drupal will not complain.
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        - composer install --optimize-autoloader
        - vendor/bin/drush cache:rebuild
        - vendor/bin/drush config:import -y
        - vendor/bin/drush updatedb -y
        - vendor/bin/drush cache:rebuild

  # This 'mysql' key acts as the hostname to access the service by from the php service.
  mysql:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mariadb:10.5

    # A set of commands to run while building this service
    commands:
      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Copy a database dump from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use scp.
        - wget "https://storage.googleapis.com/gcs-pantheon-backups/51b73c1d-15ea-4605-9b35-139337cefb1f/live/1689338718_export/diffy-marketing_live_2023-07-14T12-45-18_UTC_database.sql.gz?Expires=1692841163&GoogleAccessId=url-signer-us%40pantheon-backups.iam.gserviceaccount.com&Signature=g7%2BVDxuQveYR%2FetxvEMbAftVhCaqBJPpR3ivESs3u5vsDUA09Ow7HrpAI3oTJ%2B9UiNI1tdEuP2MQBhbtMqAkrpPIOPVTtsh%2FxNvfPDb8Hyzg6AyQQ%2BPbcew7l7cgYX9avKomYg9o6WA9qg5q3A8jqKkIoPjQpSCPD%2F3zNUoqoI4%2B1SpE4x7q9MleemxfcVdK4B%2BvIJrr2ip%2BkJDJzdhHCLuqtedLpZqnX6Jl%2Bpadgp9ZJH7aYy2w5Mx0VTKEu03p4VrJSDxPE0NMqKo%2FdORQ264nCMYGJmcwn2mZswHK424biL%2BrAJM8LzOjz%2BqDkZR5G64YnFeP7e0nbbVwLm6ikw%3D%3D" /tmp/database.sql.gz
        - zcat /tmp/database.sql.gz | mysql tugboat
        - rm /tmp/database.sql.gz

  diffy:
    image: tugboatqa/php:8.2-apache
    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        - curl -L https://github.com/diffywebsite/diffy-cli/releases/latest/download/diffy.phar -o /usr/local/bin/diffy
        - chmod +x /usr/local/bin/diffy
        - diffy auth:login $DIFFY_API_KEY

      online:
        - diffy project:compare $DIFFY_PROJECT_ID prod custom --env2Url=$TUGBOAT_SERVICE_URL